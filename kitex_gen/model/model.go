// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

type BaseResp struct {
	Code int64  `thrift:"code,1" frugal:"1,default,i64" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) InitDefault() {
}

func (p *BaseResp) GetCode() (v int64) {
	return p.Code
}

func (p *BaseResp) GetMsg() (v string) {
	return p.Msg
}
func (p *BaseResp) SetCode(val int64) {
	p.Code = val
}
func (p *BaseResp) SetMsg(val string) {
	p.Msg = val
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

func (p *BaseResp) DeepEqual(ano *BaseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *BaseResp) Field1DeepEqual(src int64) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *BaseResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_BaseResp = map[int16]string{
	1: "code",
	2: "msg",
}

type UserInfo struct {
	Username  string `thrift:"username,1" frugal:"1,default,string" json:"username"`
	UserId    string `thrift:"userId,2" frugal:"2,default,string" json:"userId"`
	Major     string `thrift:"Major,4" frugal:"4,default,string" json:"Major"`
	College   string `thrift:"college,5" frugal:"5,default,string" json:"college"`
	Grade     string `thrift:"grade,6" frugal:"6,default,string" json:"grade"`
	Email     string `thrift:"email,7" frugal:"7,default,string" json:"email"`
	Role      string `thrift:"role,8" frugal:"8,default,string" json:"role"`
	CreatedAt string `thrift:"created_at,9,required" frugal:"9,required,string" json:"created_at"`
	UpdatedAt string `thrift:"updated_at,10,required" frugal:"10,required,string" json:"updated_at"`
	DeletedAt string `thrift:"deleted_at,11,required" frugal:"11,required,string" json:"deleted_at"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func (p *UserInfo) InitDefault() {
}

func (p *UserInfo) GetUsername() (v string) {
	return p.Username
}

func (p *UserInfo) GetUserId() (v string) {
	return p.UserId
}

func (p *UserInfo) GetMajor() (v string) {
	return p.Major
}

func (p *UserInfo) GetCollege() (v string) {
	return p.College
}

func (p *UserInfo) GetGrade() (v string) {
	return p.Grade
}

func (p *UserInfo) GetEmail() (v string) {
	return p.Email
}

func (p *UserInfo) GetRole() (v string) {
	return p.Role
}

func (p *UserInfo) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *UserInfo) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

func (p *UserInfo) GetDeletedAt() (v string) {
	return p.DeletedAt
}
func (p *UserInfo) SetUsername(val string) {
	p.Username = val
}
func (p *UserInfo) SetUserId(val string) {
	p.UserId = val
}
func (p *UserInfo) SetMajor(val string) {
	p.Major = val
}
func (p *UserInfo) SetCollege(val string) {
	p.College = val
}
func (p *UserInfo) SetGrade(val string) {
	p.Grade = val
}
func (p *UserInfo) SetEmail(val string) {
	p.Email = val
}
func (p *UserInfo) SetRole(val string) {
	p.Role = val
}
func (p *UserInfo) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *UserInfo) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *UserInfo) SetDeletedAt(val string) {
	p.DeletedAt = val
}

func (p *UserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfo(%+v)", *p)
}

func (p *UserInfo) DeepEqual(ano *UserInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field4DeepEqual(ano.Major) {
		return false
	}
	if !p.Field5DeepEqual(ano.College) {
		return false
	}
	if !p.Field6DeepEqual(ano.Grade) {
		return false
	}
	if !p.Field7DeepEqual(ano.Email) {
		return false
	}
	if !p.Field8DeepEqual(ano.Role) {
		return false
	}
	if !p.Field9DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field10DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field11DeepEqual(ano.DeletedAt) {
		return false
	}
	return true
}

func (p *UserInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UserId, src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Major, src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field5DeepEqual(src string) bool {

	if strings.Compare(p.College, src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Grade, src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Role, src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field9DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field10DeepEqual(src string) bool {

	if strings.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field11DeepEqual(src string) bool {

	if strings.Compare(p.DeletedAt, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserInfo = map[int16]string{
	1:  "username",
	2:  "userId",
	4:  "Major",
	5:  "college",
	6:  "grade",
	7:  "email",
	8:  "role",
	9:  "created_at",
	10: "updated_at",
	11: "deleted_at",
}
